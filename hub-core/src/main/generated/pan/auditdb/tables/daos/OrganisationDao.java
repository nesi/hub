/*
 * Things
 *
 * Copyright (c) 2014, Markus Binsteiner. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

/**
 * This class is generated by jOOQ
 */
package pan.auditdb.tables.daos;

/**
 * This class is generated by jOOQ.
 * <p>
 * InnoDB free: 8458240 kB
 */
@javax.annotation.Generated(value = {"http://www.jooq.org", "3.3.2"},
        comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OrganisationDao extends org.jooq.impl.DAOImpl<pan.auditdb.tables.records.OrganisationRecord, pan.auditdb.tables.pojos.Organisation, java.lang.String> {

    /**
     * Create a new OrganisationDao without any configuration
     */
    public OrganisationDao() {
        super(pan.auditdb.tables.Organisation.ORGANISATION, pan.auditdb.tables.pojos.Organisation.class);
    }

    /**
     * Create a new OrganisationDao with an attached configuration
     */
    public OrganisationDao(org.jooq.Configuration configuration) {
        super(pan.auditdb.tables.Organisation.ORGANISATION, pan.auditdb.tables.pojos.Organisation.class, configuration);
    }

    /**
     * Fetch records that have <code>collaborator IN (values)</code>
     */
    public java.util.List<pan.auditdb.tables.pojos.Organisation> fetchByCollaborator(java.lang.Integer... values) {
        return fetch(pan.auditdb.tables.Organisation.ORGANISATION.COLLABORATOR, values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public java.util.List<pan.auditdb.tables.pojos.Organisation> fetchById(java.lang.String... values) {
        return fetch(pan.auditdb.tables.Organisation.ORGANISATION.ID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public java.util.List<pan.auditdb.tables.pojos.Organisation> fetchByName(java.lang.String... values) {
        return fetch(pan.auditdb.tables.Organisation.ORGANISATION.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public pan.auditdb.tables.pojos.Organisation fetchOneById(java.lang.String value) {
        return fetchOne(pan.auditdb.tables.Organisation.ORGANISATION.ID, value);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected java.lang.String getId(pan.auditdb.tables.pojos.Organisation object) {
        return object.getId();
    }
}
