/**
 * This class is generated by jOOQ
 */
package projectdb.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.2" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projectallocation extends org.jooq.impl.TableImpl<projectdb.tables.records.ProjectallocationRecord> {

	private static final long serialVersionUID = 891047408;

	/**
	 * The singleton instance of <code>projectdb.projectallocation</code>
	 */
	public static final projectdb.tables.Projectallocation PROJECTALLOCATION = new projectdb.tables.Projectallocation();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<projectdb.tables.records.ProjectallocationRecord> getRecordType() {
		return projectdb.tables.records.ProjectallocationRecord.class;
	}

	/**
	 * The column <code>projectdb.projectallocation.id</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.ProjectallocationRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>projectdb.projectallocation.facilityId</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.ProjectallocationRecord, java.lang.Integer> FACILITYID = createField("facilityId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>projectdb.projectallocation.projectId</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.ProjectallocationRecord, java.lang.Integer> PROJECTID = createField("projectId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>projectdb.projectallocation.allocation</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.ProjectallocationRecord, java.lang.String> ALLOCATION = createField("allocation", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>projectdb.projectallocation.lastModified</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.ProjectallocationRecord, java.sql.Timestamp> LASTMODIFIED = createField("lastModified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>projectdb.projectallocation</code> table reference
	 */
	public Projectallocation() {
		this("projectallocation", null);
	}

	/**
	 * Create an aliased <code>projectdb.projectallocation</code> table reference
	 */
	public Projectallocation(java.lang.String alias) {
		this(alias, projectdb.tables.Projectallocation.PROJECTALLOCATION);
	}

	private Projectallocation(java.lang.String alias, org.jooq.Table<projectdb.tables.records.ProjectallocationRecord> aliased) {
		this(alias, aliased, null);
	}

	private Projectallocation(java.lang.String alias, org.jooq.Table<projectdb.tables.records.ProjectallocationRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, projectdb.Projectdb.PROJECTDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<projectdb.tables.records.ProjectallocationRecord, java.lang.Integer> getIdentity() {
		return projectdb.Keys.IDENTITY_PROJECTALLOCATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<projectdb.tables.records.ProjectallocationRecord> getPrimaryKey() {
		return projectdb.Keys.KEY_PROJECTALLOCATION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<projectdb.tables.records.ProjectallocationRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<projectdb.tables.records.ProjectallocationRecord>>asList(projectdb.Keys.KEY_PROJECTALLOCATION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<projectdb.tables.records.ProjectallocationRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<projectdb.tables.records.ProjectallocationRecord, ?>>asList(projectdb.Keys.ALLOC_FK1, projectdb.Keys.ALLOC_FK2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public projectdb.tables.Projectallocation as(java.lang.String alias) {
		return new projectdb.tables.Projectallocation(alias, this);
	}

	/**
	 * Rename this table
	 */
	public projectdb.tables.Projectallocation rename(java.lang.String name) {
		return new projectdb.tables.Projectallocation(name, null);
	}
}
