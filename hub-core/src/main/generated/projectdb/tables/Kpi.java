/**
 * This class is generated by jOOQ
 */
package projectdb.tables;

/**
 * This class is generated by jOOQ.
 *
 * Key Performance Indicators (for us).
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.2" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kpi extends org.jooq.impl.TableImpl<projectdb.tables.records.KpiRecord> {

	private static final long serialVersionUID = 1972233743;

	/**
	 * The singleton instance of <code>projectdb.kpi</code>
	 */
	public static final projectdb.tables.Kpi KPI = new projectdb.tables.Kpi();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<projectdb.tables.records.KpiRecord> getRecordType() {
		return projectdb.tables.records.KpiRecord.class;
	}

	/**
	 * The column <code>projectdb.kpi.id</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.KpiRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>projectdb.kpi.type</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.KpiRecord, java.lang.String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>projectdb.kpi.title</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.KpiRecord, java.lang.String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.length(65535).nullable(false), this, "");

	/**
	 * The column <code>projectdb.kpi.measures</code>.
	 */
	public final org.jooq.TableField<projectdb.tables.records.KpiRecord, java.lang.String> MEASURES = createField("measures", org.jooq.impl.SQLDataType.CLOB.length(65535).nullable(false), this, "");

	/**
	 * Create a <code>projectdb.kpi</code> table reference
	 */
	public Kpi() {
		this("kpi", null);
	}

	/**
	 * Create an aliased <code>projectdb.kpi</code> table reference
	 */
	public Kpi(java.lang.String alias) {
		this(alias, projectdb.tables.Kpi.KPI);
	}

	private Kpi(java.lang.String alias, org.jooq.Table<projectdb.tables.records.KpiRecord> aliased) {
		this(alias, aliased, null);
	}

	private Kpi(java.lang.String alias, org.jooq.Table<projectdb.tables.records.KpiRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, projectdb.Projectdb.PROJECTDB, aliased, parameters, "Key Performance Indicators (for us).");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<projectdb.tables.records.KpiRecord> getPrimaryKey() {
		return projectdb.Keys.KEY_KPI_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<projectdb.tables.records.KpiRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<projectdb.tables.records.KpiRecord>>asList(projectdb.Keys.KEY_KPI_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public projectdb.tables.Kpi as(java.lang.String alias) {
		return new projectdb.tables.Kpi(alias, this);
	}

	/**
	 * Rename this table
	 */
	public projectdb.tables.Kpi rename(java.lang.String name) {
		return new projectdb.tables.Kpi(name, null);
	}
}
