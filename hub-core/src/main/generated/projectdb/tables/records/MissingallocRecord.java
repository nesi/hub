/**
 * This class is generated by jOOQ
 */
package projectdb.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.2" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MissingallocRecord extends org.jooq.impl.UpdatableRecordImpl<projectdb.tables.records.MissingallocRecord> implements org.jooq.Record8<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String> {

	private static final long serialVersionUID = 1266437679;

	/**
	 * Setter for <code>projectdb.missingalloc.id</code>.
	 */
	public void setId(java.lang.Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.id</code>.
	 */
	public java.lang.Integer getId() {
		return (java.lang.Integer) getValue(0);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_modification_time</code>.
	 */
	public void setGModificationTime(java.lang.Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_modification_time</code>.
	 */
	public java.lang.Integer getGModificationTime() {
		return (java.lang.Integer) getValue(1);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_creation_time</code>.
	 */
	public void setGCreationTime(java.lang.Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_creation_time</code>.
	 */
	public java.lang.Integer getGCreationTime() {
		return (java.lang.Integer) getValue(2);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_account</code>.
	 */
	public void setGAccount(java.lang.Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_account</code>.
	 */
	public java.lang.Integer getGAccount() {
		return (java.lang.Integer) getValue(3);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_credit_limit</code>.
	 */
	public void setGCreditLimit(java.lang.String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_credit_limit</code>.
	 */
	public java.lang.String getGCreditLimit() {
		return (java.lang.String) getValue(4);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_project</code>.
	 */
	public void setGProject(java.lang.String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_project</code>.
	 */
	public java.lang.String getGProject() {
		return (java.lang.String) getValue(5);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_active</code>.
	 */
	public void setGActive(java.lang.String value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_active</code>.
	 */
	public java.lang.String getGActive() {
		return (java.lang.String) getValue(6);
	}

	/**
	 * Setter for <code>projectdb.missingalloc.g_facility</code>.
	 */
	public void setGFacility(java.lang.String value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>projectdb.missingalloc.g_facility</code>.
	 */
	public java.lang.String getGFacility() {
		return (java.lang.String) getValue(7);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Record1<java.lang.Integer> key() {
		return (org.jooq.Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row8<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String> fieldsRow() {
		return (org.jooq.Row8) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row8<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String> valuesRow() {
		return (org.jooq.Row8) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field1() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field2() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_MODIFICATION_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field3() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_CREATION_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field4() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_ACCOUNT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field5() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_CREDIT_LIMIT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field6() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_PROJECT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field7() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_ACTIVE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field8() {
		return projectdb.tables.Missingalloc.MISSINGALLOC.G_FACILITY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value2() {
		return getGModificationTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value3() {
		return getGCreationTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value4() {
		return getGAccount();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value5() {
		return getGCreditLimit();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value6() {
		return getGProject();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value7() {
		return getGActive();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value8() {
		return getGFacility();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value1(java.lang.Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value2(java.lang.Integer value) {
		setGModificationTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value3(java.lang.Integer value) {
		setGCreationTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value4(java.lang.Integer value) {
		setGAccount(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value5(java.lang.String value) {
		setGCreditLimit(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value6(java.lang.String value) {
		setGProject(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value7(java.lang.String value) {
		setGActive(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord value8(java.lang.String value) {
		setGFacility(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MissingallocRecord values(java.lang.Integer value1, java.lang.Integer value2, java.lang.Integer value3, java.lang.Integer value4, java.lang.String value5, java.lang.String value6, java.lang.String value7, java.lang.String value8) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MissingallocRecord
	 */
	public MissingallocRecord() {
		super(projectdb.tables.Missingalloc.MISSINGALLOC);
	}

	/**
	 * Create a detached, initialised MissingallocRecord
	 */
	public MissingallocRecord(java.lang.Integer id, java.lang.Integer gModificationTime, java.lang.Integer gCreationTime, java.lang.Integer gAccount, java.lang.String gCreditLimit, java.lang.String gProject, java.lang.String gActive, java.lang.String gFacility) {
		super(projectdb.tables.Missingalloc.MISSINGALLOC);

		setValue(0, id);
		setValue(1, gModificationTime);
		setValue(2, gCreationTime);
		setValue(3, gAccount);
		setValue(4, gCreditLimit);
		setValue(5, gProject);
		setValue(6, gActive);
		setValue(7, gFacility);
	}
}
